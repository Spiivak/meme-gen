<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="css/styles.css">
  <title>Meme Generator</title>
</head>
<body class="main-layout" onload="onInit()">
  <header class="main-header flex space-between align-center full">
    <div class="logo flex"><img src="assets/memegen-logo.png" alt="Meme Generator Logo"></div>
    <!-- <input type="search" placeholder="Search"> -->
    <nav class="main-nav">
      <ul class="main-nav-list flex clean-list">
        <li><a href="#">Memes</a></li>
        <li><a href="#">Gallery</a></li>
        <li><a href="#">About</a></li>
      </ul> 
    </nav>
  </header>
  <aside class="main-side-bar flex justify-center">
    <nav class="side-nav">
      <ul class="aside-nav-list clean-list">
        <li><a href="#">Funny</a></li>
        <li><a href="#">Animal</a></li>
        <li><a href="#">Men</a></li>
        <li><a href="#">Woman</a></li>
      </ul>
    </nav>
  </aside>
  <section class="gallery-layout gallery-container wrap">
    </div>
  </section>

  <section class="canvas-container flex align-center justify-center hide">
    <a onclick="goBack()" class="go-back">Back to Gallery</a>
      <!-- Canvas will be rendered here -->
      <div class="canvas-main">

        
        <div class="canvas-object"></div>
      </div>

      <!-- Canvas Actions Box -->
      <div class="canvas-actions flex column space-between">
        <div class="main-actions">
      
        <!-- Top Section, Actions -->
        <div class="edit-text flex space-between align-center">
          <h2 class="edit-text-title">Edit Text Lines</h2>
          <div class="edit-text-actions flex align-center">
            <h3>1/2</h3>
            <button onclick="onSwitchLine()"><i class="fa-solid fa-shuffle"></i></button>
            <button onclick="onAddLine()"><i class="fa-regular fa-square-plus"></i></button>
            <button onclick="onDeleteLine()"><i class="fa-regular fa-square-minus"></i></button>
          </div>
        </div>

        <div class="text-actions flex space-evenly">
          <div class="font-family">
            <select name="font-family" id="font-family" onchange="onSetFontFam(this.value)">
              <option value="arial">Arial</option>
              <option value="poppins">Poppins</option>
              <option value="impact">Impact</option>
            </select>
          </div>
          <div class="font-size">
            <select name="font-size" id="font-size" onchange="getFontSize()">
              <option value="10">10</option>
              <option value="12">12</option>
              <option value="11">11</option>
              <option value="13">13</option>
              <option value="14">14</option>
              <option value="15">15</option>
              <option value="16">16</option>
              <option value="20">20</option>
              <option value="24">24</option>
              <option value="32">32</option>
              <option value="36">36</option>
              <option value="40">40</option>
              <option value="48">48</option>
              <option value="64">64</option>
              <option value="96">96</option>
              <option value="128">128</option>
            </select>
          </div>
          <div class="align-text">
            <button onclick="onSetAlign('left')" class="btn-align-left"><i class="fa-solid fa-align-left"></i></button>
            <button onclick="onSetAlign('center')" class="btn-align-center"><i class="fa-solid fa-align-center"></i></button>
            <button onclick="onSetAlign('right')" class="btn-align-right"><i class="fa-solid fa-align-right"></i></button>
          </div>
          <div class="shape">
            <button class="storke-toggle"><img src="assets/icons/A.svg"></button>
            <button onclick="openColorPicker()" class="storke-toggle"><i class="fa-solid fa-paintbrush"></i></button>
          </div>
        </div>

        <div class="text-input">
          <input type="text" placeholder="Enter a text">
          <button onclick="getTxtInput()">Submit</button>
        </div>
        <div class="stickers">
          <h2>Stickers</h2>
          <div class="stickers-container"></div>
        </div>
      </div>
        <div class="download-save-share flex justify-center flex-end">
          <button><a href="#" class="btn" onclick="downloadImg(this)" download="my-img.jpg">Download</a></button>
          <button class="save">Save</button>
          <button class="share">Share</button>
        </div>
        
      </div>
  </section>
  <input type="color" id="colorPicker" class="hide"  onchange="getColorInput()">

  <footer class="footer-layout flex justify-center align-center full">Made without ❤️ by Eden Spivak</footer>

  <script src="https://kit.fontawesome.com/1206d36ae0.js" crossorigin="anonymous"></script>

  <script src="js/controllers/main.controller.js"></script>
  <script src="js/services/gallery.service.js"></script>
  <script src="js/services/meme.service.js"></script>
  <script src="js/controllers/gallery.controller.js"></script>
  <script src="js/controllers/meme.controller.js"></script>
<!-- Code injected by live-server -->
<script>
	// <![CDATA[  <-- For SVG support
	if ('WebSocket' in window) {
		(function () {
			function refreshCSS() {
				var sheets = [].slice.call(document.getElementsByTagName("link"));
				var head = document.getElementsByTagName("head")[0];
				for (var i = 0; i < sheets.length; ++i) {
					var elem = sheets[i];
					var parent = elem.parentElement || head;
					parent.removeChild(elem);
					var rel = elem.rel;
					if (elem.href && typeof rel != "string" || rel.length == 0 || rel.toLowerCase() == "stylesheet") {
						var url = elem.href.replace(/(&|\?)_cacheOverride=\d+/, '');
						elem.href = url + (url.indexOf('?') >= 0 ? '&' : '?') + '_cacheOverride=' + (new Date().valueOf());
					}
					parent.appendChild(elem);
				}
			}
			var protocol = window.location.protocol === 'http:' ? 'ws://' : 'wss://';
			var address = protocol + window.location.host + window.location.pathname + '/ws';
			var socket = new WebSocket(address);
			socket.onmessage = function (msg) {
				if (msg.data == 'reload') window.location.reload();
				else if (msg.data == 'refreshcss') refreshCSS();
			};
			if (sessionStorage && !sessionStorage.getItem('IsThisFirstTime_Log_From_LiveServer')) {
				console.log('Live reload enabled.');
				sessionStorage.setItem('IsThisFirstTime_Log_From_LiveServer', true);
			}
		})();
	}
	else {
		console.error('Upgrade your browser. This Browser is NOT supported WebSocket for Live-Reloading.');
	}
	// ]]>
</script>
</body>
</html>